import datatype
import geometry
import thing

Model:
    (
    imports*=Import
    actor=Actor
    )#
;

CompositeActor:
    'CActor' name=ID
	(
        ('shape' ':' shape=Shape)?
        ('actors' ':'
             '-' actors+=PosedActor['-'])?
        ('composites' ':'
             '-' composites+=PosedCActor['-'])?
        ('dataModel:' dataModel=[DataType:FQN])?
	)#
    'end'
;

PosedActor:
    ref=[Actor:FQN|+m:actor] ('('name=ID')')? (transformation=Transformation)?
;

PosedCActor:
    ref=[CompositeActor:FQN|+m:thing] (transformation=Transformation)?
;

Actor:
    SoundSource |
    Color       |
    Text        |
    EnvActor    |
    Human        
;

SoundSource:
    'SoundSource' name=ID
        (
            ('class:' class=ID)
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            // ('maxfreq:' maxFreq=FLOAT)?
            ('language' ':' language=STRING)?
            ('speech:' speech=STRING)?
            ('emotion:' emotion=STRING)?
            ('minRange:' minRange=FLOAT)?
            ('maxRange:' maxRange=FLOAT)?
        )#
    'end'
;

Color:
    'Color' name=ID
        (
            ('class:' class=ID)
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            // ('maxfreq:' maxFreq=FLOAT)?
            ('r' ':' r=INT)?
            ('g' ':' g=INT)?
            ('b' ':' b=INT)?
        )#
    'end'
;

Text:
    'Text' name=ID
        (
            ('class:' class=ID)
            ('dataModel:' dataModel=[DataType:FQN])
            ('type:' type=[TextType])?
            ('shape' ':' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            // ('maxfreq:' maxFreq=FLOAT)?
            ('message' ':' message=STRING)?
        )#
    'end'
;

TextType:
    'Barcode'     |
    'QR'          |
    'RFIDTag'     |
    'PlainText'
;

EnvActor:
    'EnvActor' name=ID
        (
            ('class:' class=ID)
            ('type:' type=[EnvActorType])?
            ('properties:' '-' EnvProperties+=EnvironmentalPropertyType['-'])?
            ('dispersion:' dispersion=DispersionType)?
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
        )#
    'end'
;

EnvActorType: 'Water' | 'Fire';

EnvironmentalPropertyType:
    name=EnvironmentalPropertyName ':' value=FLOAT;

EnvironmentalPropertyName:
    'temperature'     |
    'airQuality'      |
    'soundLevelDB'    |
    'co2'             |
    'gas'             |
    'luminosity'     |
    'humidity'
;

Human:
    'Human' name=ID
        (
            ('class:' class=ID)
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            // ('maxfreq:' maxFreq=FLOAT)?
            ('motion' ':' motion=STRING)?
            ('language' ':' language=STRING)?
            ('speech:' speech=STRING)?
            ('emotion:' emotion=STRING)?
            ('age:' age=INT)?
            ('minRange:' minRange=FLOAT)?
            ('maxRange:' maxRange=FLOAT)?
        )#
    'end'
;

DispersionType:
    Constant      |
    Linear        |
    Quadratic     |
    Exponential   |
    Logarithmic
;

Constant:
    'Constant' '(' 'value' ':' value=FLOAT ')'
;

Linear:
    'Linear' '('
        'start' ':' startingPoint=FLOAT ',' 
        'step' ':' step=FLOAT
    ')'
;

Quadratic:
    'Quadratic' '('
        'a' ':' a=FLOAT ',' 
        'b' ':' b=FLOAT ',' 
        'c' ':' c=FLOAT
    ')'
;

Exponential:
    'Exponential' '('
        'base' ':' base=FLOAT ',' 
        'yIntercept' ':' yIntercept=FLOAT
    ')'
;

Logarithmic:
    'Logarithmic' '('
        'base' ':' base=FLOAT ',' 
        'alpha' ':' alpha=FLOAT
    ')'
;
