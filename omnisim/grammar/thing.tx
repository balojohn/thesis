import datatype
import geometry

Model:
    (
    imports*=Import
    thing=Thing
    )#
;


Thing: Sensor | Actuator | CompositeThing;

CompositeThing:
    'CThing' name=ID
	(
        ('type:' type=ID)?
        ('pubFreq:' pubFreq=FLOAT)?
        ('shape:' shape=Shape)?
        ('automated:' automated=BOOL)?
        ('targets:'
             '-' targets+=TargetPose['-'])?
        ('sensors:'
             '-' sensors+=PosedSensor['-'])?
        ('actuators:'
             '-' actuators+=PosedActuator['-'])?
        ('composites:'
             '-' composites+=PosedCThing['-'])?
	)#
    'end'
;

TargetPose:
    point=Point | angle=Angle
;

PosedThing: PosedSensor | PosedActuator | PosedCThing;

PosedCThing:
    ( ref=[CompositeThing:FQN]) ('('name=ID')')? (transformation=DTransformation)?
;

PosedSensor:
    (ref=[Sensor:FQN]) ('('name=ID')')? (transformation=DTransformation)?
;

PosedActuator:
    ref=[Actuator:FQN] ('('name=ID')')? (transformation=DTransformation)?
;

Sensor:
    EnvSensor   |
    RangeFinder |
    LiDAR       |
    Reader      |
    Alarm       |
    Microphone  |
    Light       |
    IMU
;

EnvSensor:
    'EnvSensor' name=ID
        (
            ('class:' class=ID)
            ('type:' type=[EnvSensorType])?
            ('subtype:' subtype=ID)?
            ('shape' ':' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            ('noise:' noise=Noise)?
            ('range:' range=FLOAT)?
        )#
    'end'
;

EnvSensorType:
    'Temperature'   |
    'Humidity'      |
    'Gas'           |
    'CO2'           |
    'PH'            |
    'AirQuality'
;

RangeFinder:
    'RangeFinder' name=ID
        (
            ('class:' class=ID)
            ('type:' type=[RangeFinderType])?
            ('subtype:' subtype=ID)?
            ('shape:' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            ('fov:' fov=FLOAT)?
            ('range:' range=FLOAT)?
            ('noise:' noise=Noise)?
        )#
    'end'
;

RangeFinderType: 'Sonar' | 'IR';

LiDAR:
    'LiDAR' name=ID
        (
            ('class:' class=ID)
            ('type:' type=ID)?
            ('shape:' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            ('distance:' distance=FLOAT)?
            ('minAngle:' minAngle=FLOAT)?
            ('maxAngle:' maxAngle=FLOAT)?
            ('numBeams:' numBeams=FLOAT)?
            ('minRange:' minRange=FLOAT)?
            ('maxRange:' maxRange=FLOAT)?
            ('noise:' noise=Noise)?
        )#
    'end'
;

Reader:
    'Reader' name=ID
        (
            ('class:' class=ID)
            ('type:' type=[ReaderType])
            ('subtype:' subtype=ID)
            ('shape:' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            ('range:' range=FLOAT)?
            ('resHeight:' resHeight=FLOAT)?
            ('resWidth:' resWidth=FLOAT)?
            ('fov:' fov=FLOAT)?
            ('noise:' noise=Noise)?
        )#
    'end'
;

ReaderType: 'Camera' | 'RFID' ;

Alarm:
    'Alarm' name=ID
        (
            ('class:' class=ID)
            ('type:' type=[AlarmType])
            ('subtype:' subtype=ID)?
            ('shape:' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            ('triggered:' triggered=INT)?
            ('range:' range=FLOAT)?
            ('hz:' hz=FLOAT)?
        )#
    'end'
;

AlarmType: 'AreaAlarm' | 'LinearAlarm' ;

Microphone:
    'Microphone' name=ID
        (
            ('class:' class=ID)
            ('type:' type=ID)?
            ('shape:' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            ('range:' range=FLOAT)?
            ('soundLevel:' soundLevel=FLOAT)?
            ('mode:' mode=STRING)?
            ('blocked:' blocked=INT)?
            ('noise:' noise=Noise)?
        )#
    'end'
;

Light:
    'Light' name=ID
        (
            ('class:' class=ID)
            ('type:' type=ID)?
            ('shape' ':' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            ('luminosity:' luminosity=FLOAT)?
            ('color:' color=STRING)?
            ('range:' range=FLOAT)?
        )#
    'end'
;

IMU:
    'IMU' name=ID
        (
            ('class:' class=ID)
            ('type:' type=[IMUType])?
            ('subtype:' subtype=ID)?
            ('shape:' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            ('noise:' noise=Noise)?
        )#
    'end'
;

IMUType: '6DOF' | '9DOF';

Actuator:
    // PanTilt     |
    EnvDevice   |
    Relay       |
    Button      |
    Led         |
    Speaker
;

// PanTilt:
//     'PanTilt' name=ID
//         (
//             ('class:' class=ID)
//             ('relativePos:' relativePos=Transformation)?
//             ('pan_shape' ':' pan_shape=Shape)?
//             ('tilt_shape' ':' tilt_shape=Shape)?
//             ('pubFreq:' pubFreq=FLOAT)?
//         )#
//     'end'
// ;

EnvDevice:
    'EnvDevice' name=ID
        (
            ('class:' class=ID)
            ('type:' type=[EnvDeviceType])?
            ('subtype:' subtype=ID)?
            ('shape' ':' shape=Shape)?
            ('dispersion:' dispersion=DispersionType)?
            ('pubFreq:' pubFreq=FLOAT)?
            ('target_value:' target_value=FLOAT)?
            ('range:' range=FLOAT)?
        )#
    'end'
;

EnvDeviceType:
    'Thermostat' |
    'Humidifier'
;

Relay:
    'Relay' name=ID
        (
            ('class:' class=ID)
            ('type:' type=ID)?
            ('shape' ':' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            // ('maxFreq:' maxFreq=FLOAT)?
            ('state:' state=STRING)?
            ('allowed_states:' allowed_states=FLOAT)?
        )#
    'end'
;

ButtonType: 'SingleButton' | 'ButtonArray';

Button:
    'Button' name=ID
        (
            ('class:' class=ID)
            ('type:' type=[ButtonType])?
            ('subtype:' subtype=ID)?
            ('shape' ':' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            ('state:' state=INT)?
            ('size:' size=INT)?
        )#
    'end'
;

LedType: 'SingleLed' | 'LedArray';

Led:
    'Led' name=ID
        (
            ('class:' class=ID)
            ('type:' type=[LedType])?
            ('subtype:' subtype=ID)?
            ('shape' ':' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            ('color' ':' color=STRING)?
        )#
    'end'
;

Speaker:
    'Speaker' name=ID
        (
            ('class:' class=ID)
            
            ('shape' ':' shape=Shape)?
            ('pubFreq:' pubFreq=FLOAT)?
            ('soundlevelDB:' soundlevelDB=FLOAT)?
        )#
    'end'
;

Noise:
    Gaussian | Uniform | CustomNoise
;

Gaussian:
    'Gaussian' '('
        'mean:' mean=FLOAT ',' 
        'std:' std=FLOAT
    ')'
;

Uniform:
    'Uniform' '('
        'min:' min=FLOAT ',' 
        'max:' max=FLOAT
    ')'
;

CustomNoise:
    'CustomNoise' '('
        'type:' type=STRING ',' 
        'params:' params=STRING
    ')'
;

DTransformation:
    ('@' transformation=Transformation)? ('on' parentThing=[PosedThing:FQN])?
;

DispersionType:
    Constant      |
    Linear        |
    Quadratic     |
    Exponential   |
    Logarithmic
;

Constant:
    'Constant' '(' 'value' ':' value=FLOAT ')'
;

Linear:
    'Linear' '('
        'start' ':' startingPoint=FLOAT ',' 
        'step' ':' step=FLOAT
    ')'
;

Quadratic:
    'Quadratic' '('
        'a' ':' a=FLOAT ',' 
        'b' ':' b=FLOAT ',' 
        'c' ':' c=FLOAT
    ')'
;

Exponential:
    'Exponential' '('
        'base' ':' base=FLOAT ',' 
        'yIntercept' ':' yIntercept=FLOAT
    ')'
;

Logarithmic:
    'Logarithmic' '('
        'base' ':' base=FLOAT ',' 
        'alpha' ':' alpha=FLOAT
    ')'
;
