{# t2d.jinja #}
{%- set excluded = [
    "class", "type", "shape", "pubFreq", "noise",
    "_tx_position", "_tx_position_end", "_tx_model",
    "parent", "name", "dataModel"
] -%}
{%- macro render_properties(obj) -%}
{% for attr, val in obj.__dict__.items() if attr not in excluded %}
    {% if val is number %}
    {{ attr }}: float
    {% elif val is string %}
    {{ attr }}: str
    {% elif val is boolean %}
    {{ attr }}: bool
    {% else %}
    {{ attr }}: {{ val.__class__.__name__ }}
    {% endif %}
{% endfor %}
{%- endmacro %}
{%- macro render_datatypes(thing) -%}
{# === Atomic Thing (Sensor/Actuator) === #}
{% if thing and not (thing.sensors is defined or thing.actuators is defined or thing.composites is defined) %}
DataType {{ thing.dataModel if thing.dataModel else thing.name ~ "Data" }}
{{ render_properties(thing) }}
end
{% endif %}
{# === Composite with nested sensors === #}
{% if thing and thing.sensors is defined %}
{% for sensor in thing.sensors | map(attribute="ref") | unique %}
DataType {{ sensor.dataModel if sensor.dataModel else sensor.name ~ "Data" }}
{{ render_properties(sensor) }}
end
{% endfor %}
{% endif %}
{# === Composite with nested actuators === #}
{% if thing and thing.actuators is defined %}
{% for actuator in thing.actuators | map(attribute="ref") | unique %}
DataType {{ actuator.dataModel if actuator.dataModel else actuator.name ~ "Data" }}
{{ render_properties(actuator) }}
end
{% endfor %}
{% endif %}
{# === Composite with nested composites === #}
{% if thing and thing.composites is defined %}
{% for comp in thing.composites | map(attribute="ref") | unique %}
    {{ render_datatypes(comp) }}
{% endfor %}
{% endif %}
{%- endmacro %}
{# ==== ENTRY POINT ==== #}
{{ render_datatypes(thing) }}
